/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.input;

import "Vector.proto";

/**
 * Contains Marker, Rigidbody, and message metadata information.
 * We use optitrack for our mocap system. Their documentation is here:
 * https://v22.wiki.optitrack.com/index.php?title=OptiTrack_Documentation_Wiki
 */
message MotionCapture {
    /// Mocap reference points to track
    message Marker {
        uint32 id       = 1;
        fvec3  position = 2;
        float  size     = 3;
<<<<<<< Updated upstream
        uint32 model_id = 4;
=======
>>>>>>> Stashed changes
    }

    message MarkerSet {
        string          name    = 1;
        repeated Marker markers = 2;
    }

    /// A collection of three or more markers on an object that are interconnected
    /// to each other with an assumption that the tracked object is undeformable.
    /// See https://v22.wiki.optitrack.com/index.php?title=Rigid_Body_Tracking The
    /// bones which make up skeletons are RigidBodys
    message RigidBody {
        uint32 id       = 1;
        fvec3  position = 2;
        /// Quaternion representation of the rigid body's rotation
        fvec4           rotation       = 3;
        repeated Marker markers        = 4;
        float           error          = 5;
        bool            tracking_valid = 6;

        // Information added by the model
        string          name     = 7;
        fvec3           offset   = 8;
        uint32          parent   = 9;
        repeated uint32 children = 10;
    }

    /// The whole character for which the motion represents
    message Skeleton {
        uint32             id    = 1;
        repeated RigidBody bones = 2;

        // Information added by the model
        string name = 3;
    }

    message LabeledMarker {
        Marker marker             = 1;
        bool   occluded           = 2;
        bool   point_cloud_solved = 3;
        bool   model_solved       = 4;
    }

    /// Each bone within a skeleton can be subject to position,
    /// orientation and scale changes over the course of the animation,
    /// where each parameter is referred to as a Channel or Degree of Freedom
    /// (DOF)
    message Channel {
        /// The changes for this degree of freedom over a given timespan
        repeated float channel = 1;
    }

    /// Contains the data output from the force plate, which can be synced with
    /// mocap footage
    message ForcePlate {
        uint32 id = 1;
        /// Set of Channels/Degrees of Freedom and their data, representing their
        /// change over time
        repeated Channel channels = 2;
    }
    uint32 frame_number = 1;
    float  latency      = 2;
    /// Encoded timestamp - 0 := the first timecode. hour:minute:second:frame
    /// bytes, in binary coded decimal see
    /// https://en.wikipedia.org/wiki/SMPTE_timecode
    uint32 timecode         = 3;
    uint32 timecode_sub     = 4;
    double natnet_timestamp = 5;
    /// Whether or not this frame is to be recorded
    bool                   recording              = 6;
    bool                   tracked_models_changed = 7;
    repeated MarkerSet     marker_sets            = 8;
    repeated Marker        markers                = 9;
    repeated RigidBody     rigid_bodies           = 10;
    repeated Skeleton      skeletons              = 11;
    repeated LabeledMarker labeled_markers        = 12;
    repeated ForcePlate    force_plates           = 13;
}
