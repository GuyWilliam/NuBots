/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.vision;

import "google/protobuf/timestamp.proto";
import "Vector.proto";
import "Matrix.proto";

message Goal {
    enum Side {
        UNKNOWN_SIDE = 0;
        LEFT         = 1;
        RIGHT        = 2;
    }
    /// Which team the goals belong to
    enum Team {
        UNKNOWN_TEAM = 0;
        OWN          = 1;
        OPPONENT     = 2;
    }
    enum MeasurementType {
        UNKNOWN = 0;
        /// The distance is from the camera to bottom centre of post
        CENTRE = 1;
    }
    message Measurement {
        MeasurementType type = 1;
        /// Normal vectors point inwards towards the centre of the object
        vec3 srGCc      = 2;  // Spherical Reciprocal Coordinates (1/distance, phi, theta)
        mat3 covariance = 3;
    }
    message Post {
        /// Vector pointing to top point of post in camera space
        vec3 top = 1;
        /// Vector pointing to bottom point of post in camera space
        vec3 bottom = 2;
        /// Distance from camera to goals, in metres
        double distance = 3;
    }
    Side                 side           = 1;
    Post                 post           = 3;
    repeated Measurement measurements   = 4;
    vec2                 screen_angular = 5;
    vec2                 angular_size   = 6;
}

message Goals {
    uint32                    id        = 1;
    google.protobuf.Timestamp timestamp = 2;
    /// Isometry3d transform from world space to camera space at the time that the image was taken
    mat4 Hcw = 3;

    repeated Goal goals = 4;
}
