#!/usr/bin/env python3

#
# File:   generate.py
# Authors:
#   Brendan Annable <brendan.annable@uon.edu.au>
#   Jake Woods <jake.f.woods@gmail.com>
#   Trent Houliston <trent@houliston.me>
#
import sys
import re
import os
import textwrap
import itertools
from banner import ampscii
from banner import bigtext


def indent(block, indent=4):
    """Indent every line of the string by the value provided in length"""
    return '\n'.join(['{}{}'.format((' ' * indent), line) for line in block])


role_name = sys.argv[1]
logo_file = sys.argv[2]
module_paths = sys.argv[3].split(';')
role_modules = sys.argv[4:]

role_template = textwrap.dedent(
    """\
    #include<nuclear>

    {includes}

    int main(int argc, char** argv) {{

        // Print the logo generated by ampscii
    {logo}

        // Print the name of the role in big letters
    {role}

        // Setup powerplant
        NUClear::PowerPlant::Configuration config;
        unsigned int nThreads = std::thread::hardware_concurrency() + 2;
        config.thread_count = nThreads >= 4 ? nThreads : 4;

        NUClear::PowerPlant plant(config, argc, const_cast<const char**>(argv));

        // Install modules
    {installers}

        plant.start();
        return 0;
    }}
    """
)

# Generate a list of include files for our dependant modules
includes = []

# Each module is given to us as Namespace::Namespace::Name.
# we need to replace the ::'s with /'s so we can include them.
# module::a::b::C
# module/a/b/C/src/C.h
headers = [re.sub(r'([^\/]+)$', r'\1/src/\1', re.sub(r'::', r'/', module)) for module in role_modules]
headers = [[[path, header] for path in module_paths] for header in headers]

# Add our module headers
for header in headers:
    found = False
    include = ''
    for path in header:
        for extension in ['hpp', 'hh', 'h']:
            if os.path.isfile('{}.{}'.format(os.path.join(*path), extension)):
                include = '#include "{}.{}"'.format(path[1], extension)
                found = True

    if found:
        includes.append(include)
    else:
        raise Exception('Cannot find main header file for {}'.format(header))

# Generate our banner from our banner image
logo = ampscii(logo_file)
logo = ['std::cerr << "{}" << std::endl;'.format(l) for l in logo.replace('\x1b', '\\x1b').split('\n')[:-1]]

# Insert banner for the name of the executing role
role = bigtext(os.path.splitext(os.path.basename(role_name))[0]).split('\n')[:-1]
role = ['std::cerr << R"({})" << std::endl;'.format(l) for l in role]

installer = 'std::cerr << "Installing " << "{module}" << std::endl; plant.install<module::{module}>();'
installers = [installer.format(module=module) for module in role_modules]

# Open our output role file
with open(role_name, 'w') as file:
    file.write(
        role_template.format(
            includes='\n'.join(includes), logo=indent(logo), role=indent(role), installers=indent(installers)
        )
    )
