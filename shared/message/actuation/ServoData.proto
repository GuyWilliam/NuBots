/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2024 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.actuation;

/**
* @author Johanne Montano
*/

// Message mainly for NUsense <-> NUC communication. NUsense will encode this message via nanopb after it queries all
// servo states and send it to the NUC.
message ServoData {
    /// The ID of the servo
    uint32 servo_id = 1;

    /// True if we need to write new values to the hardware
    bool dirty = 2;

    /// Current error state of the servo
    /// different to the dynamixel packet error status
    uint32 hardware_error = 3;
    /// Most recent packet error received, to cache before RawSensors is emitted
    uint32 packet_error = 4;

    /// True if we simulate where we think the servos should be
    /// that we still write the commands to hardware
    bool simulated = 5;

    /// Our internal system torque target, this is never sent to the servo
    int32 torque = 6;
    /// Whether the servo's torque is enabled, allowing it to move
    bool torque_enabled = 7;

    // Cached values that are never read and are sent to the servos
    /// The integral gain of the velocity
    float velocity_i_gain = 8;
    /// The proportional gain of the velocity
    float velocity_p_gain = 9;

    /// The derivative gain of the position
    float position_d_gain = 10;
    /// The integral gain of the position
    float position_i_gain = 11;
    /// The proportional gain of the position
    float position_p_gain = 12;

    /// The first feedforward torque coefficient
    float feedforward_1st_gain = 13;
    /// The second feedforward torque coefficient
    float feedforward_2nd_gain = 14;

    /// The target pulse width modulation of the servo
    float goal_pwm = 15;
    /// The target current of the servo
    float goal_current = 16;
    /// The target velocity of the servo, not used by the servos
    float goal_velocity = 17;
    /// The target position of the servo
    float goal_position = 18;

    /// The target acceleration of the servo
    float profile_acceleration = 19;
    /// The target velocity of the servo, replacing moving speed in v1 protocol
    float profile_velocity = 20;

    // Values that are either simulated or read from the servos
    /// The last read pulse width modulation of the servo
    float present_pwm = 21;
    /// The last read current of the servo
    float present_current = 22;
    /// The last read velocity of the servo
    float present_velocity = 23;
    /// The last read position of the servo
    float present_position = 24;

    /// The last read voltage of the servo
    float voltage = 25;
    /// The last read temperature of the servo
    float temperature = 26;

    /// Whether we have initialised this servo yet
    bool initialised = 27;
}
