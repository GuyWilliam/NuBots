/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.motion;

import "Vector.proto";

/**
 * Type is NORMAL or POWER (POWER means disregard robot safety and smash it).
 */
enum KickCommandType {
    NORMAL = 0;
    POWER  = 1;
}

/**
 * Contains kick target, direction, and magnitude.
 */
message KickCommand {

    /**
     * The {x, y, z} point to kick.
     */
    vec3            target          = 1;

    /**
     * Force is the magnitude.
     */
    vec3            direction       = 2;

    /**
     * Type is NORMAL or POWER (POWER means disregard robot safety and smash it).
     */
    KickCommandType kickCommandType = 3;
}


/**
 * Contains kick direction and which leg to kick with.
 */
message KickScriptCommand {

    /**
     * Direction to kick with magnitude determining force.
     */
    vec3   direction = 1;

    /**
     * Leg to kick with. Use LimbID::LEFT_LEG or LimbID::RIGHT_LEG to check value.
     */
    uint32 leg       = 2;
}

/**
 * Contains config info for kick planner.
 */
message KickPlannerConfig {

    /**
     * Maximum distance the ball can be away, in metres.
     */
    float max_ball_distance        = 1;

    float kick_corridor_width      = 2;

    /**
     * How many seconds without vision until the robot decides to not kick.
     */
    float seconds_not_seen_limit   = 3;

    float kick_forward_angle_limit = 4;
}

/**
 * Empty message which indicates a kick is finished.
 */
message KickFinished {}

/**
 * Contains stand height for IK kick.
 */
message IKKickParams {

    float stand_height = 1;
}
