/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.platform;

import "message/platform/webots/messages.proto";
import "google/protobuf/timestamp.proto";

import "Vector.proto";

/**
 * @author Alex Biddulph
 */
message RawSensors {
    /// Set of error flags/statuses.
    /// bitmask values.

    /// @note RawSensors::Error is kept for protocol v1 compatibility only.
    /// Values are prefixed with an underscore to resolve naming conflicts.
    enum Error {
        OK_            = 0;  // not really a flag but the lack of any other flag
        INPUT_VOLTAGE_ = 1;
        ANGLE_LIMIT_   = 2;
        OVERHEATING_   = 4;
        RANGE_         = 8;
        CHECKSUM_      = 16;
        OVERLOAD_      = 32;
        INSTRUCTION_   = 64;
        CORRUPT_DATA_  = 128;
        TIMEOUT_       = 256;
    }

    // See https://emanual.robotis.com/docs/en/dxl/protocol2/#error
    enum PacketError {
        PACKET_OK   = 0;
        RESULT_FAIL = 1;   // Failed to process the sent Instruction Packet
        INSTRUCTION = 2;   // Undefined Instruction has been used OR Action has been used without Reg Write
        CRC         = 4;   // CRC of the sent Packet does not match
        DATA_RANGE  = 8;   // Data to be written in the corresponding Address is outside the range of the minimum/maximum value
        DATA_LENGTH = 16;  // Attempt to write Data that is shorter than the data length of the corresponding Address
        DATA_LIMIT  = 32;  // Data to be written in the corresponding Address is outside of the Limit value
        ACCESS      = 64;  // Attempt to read/write a value in an Address that is Write/Read Only or has not been defined
        ALERT       = 128; // Error with device, check the Hardware Error Status of the control table
    }

    // See https://emanual.robotis.com/docs/en/dxl/mx/mx-64-2/#hardware-error-status70
    // Same for all servo types (MX64(2), MX106(2), XH540)
    enum HardwareError {
        HARDWARE_OK      = 0;
        INPUT_VOLTAGE    = 1;
        UNUSED_BIT_1     = 2; // Unused, Always 0
        OVERHEATING      = 4;
        MOTOR_ENCODER    = 8;
        ELECTRICAL_SHOCK = 16;
        OVERLOAD         = 32;
    }

    message LEDPanel {
        bool led2 = 1;
        bool led3 = 2;
        bool led4 = 3;
    }

    message HeadLED {
        /// Encode as 0x00 0xRR 0xGG 0xBB
        uint32 RGB = 1;
    }

    message EyeLED {
        /// Encode as 0x00 0xRR 0xGG 0xBB
        uint32 RGB = 1;
    }

    message Buttons {
        bool left   = 1;
        bool middle = 2;
        bool right  = 3;
    }

    message Accelerometer {
        float x = 1;
        float y = 2;
        float z = 3;
    }

    message Gyroscope {
        float x = 1;
        float y = 2;
        float z = 3;
    }

    /// The robot has Force Sensitive Resistors on its feet to detect whether a foot is down.
    /// There are four FSRs per foot, so this message is for one foot
    message FSR {
        float  fsr1        = 1;
        float  fsr2        = 2;
        float  fsr3        = 3;
        float  fsr4        = 4;
        float  centre_x    = 5;
        float  centre_y    = 6;
        uint32 error_flags = 7;
    }

    message FSRs {
        /// Left foot
        FSR left = 1;
        /// Right foot
        FSR right = 2;
    }

    // Full set of information to use for servos using Dynamixel v2 firmware
    message Servo {
        // keep this for compatibility with cm740/v1 while we need it
        uint32        error_flags           = 1; // components of type RawSensors::Error (but can have multiple bits set)
        // this is for the protocol v2
        uint32        hardware_error        = 2; // components of type RawSensors::HardwareError (but can have multiple bits set)
        bool          torque_enabled        = 3;
        float         velocity_i_gain       = 4;
        float         velocity_p_gain       = 5;
        float         position_d_gain       = 6;
        float         position_i_gain       = 7;
        float         position_p_gain       = 8;
        float         feed_forward_1st_Gain = 9;
        float         feed_forward_2nd_Gain = 10;
        float         present_PWM           = 11;
        float         present_current       = 12;
        float         present_velocity      = 13;
        float         present_position      = 14;
        float         goal_PWM              = 15;
        float         goal_current          = 16;
        float         goal_velocity         = 17;
        float         goal_position         = 18;
        float         voltage               = 19;
        float         temperature           = 20;
        float         profile_acceleration  = 21;
        // Replaces "Moving speed" from v1 protocol, basically just the set speed.
        float         profile_velocity      = 22;
    };

    /// Set of all the servos on the robot
    message Servos {
        Servo r_shoulder_pitch = 1;
        Servo l_shoulder_pitch = 2;
        Servo r_shoulder_roll  = 3;
        Servo l_shoulder_roll  = 4;
        Servo r_elbow          = 5;
        Servo l_elbow          = 6;
        Servo r_hip_yaw        = 7;
        Servo l_hip_yaw        = 8;
        Servo r_hip_roll       = 9;
        Servo l_hip_roll       = 10;
        Servo r_hip_pitch      = 11;
        Servo l_hip_pitch      = 12;
        Servo r_knee           = 13;
        Servo l_knee           = 14;
        Servo r_ankle_pitch    = 15;
        Servo l_ankle_pitch    = 16;
        Servo r_ankle_roll     = 17;
        Servo l_ankle_roll     = 18;
        Servo head_pan         = 19;
        Servo head_tilt        = 20;
    }

    google.protobuf.Timestamp timestamp            = 1;  // Timestamp when our data were taken

    // again, keep this for compatibility with cm740/v1 while we need it
    uint32                    platform_error_flags = 2;
    // this is for protocol v2
    uint32                    subcontroller_error  = 3; // components of type RawSensors::PacketError (but can have multiple bits set)

    LEDPanel                  led_panel            = 4;
    HeadLED                   head_led             = 5;
    EyeLED                    eye_led              = 6;
    Buttons                   buttons              = 7;
    fvec3                     accelerometer        = 8;
    fvec3                     gyroscope            = 9;
    Servos                    servo                = 10;
    float                     battery              = 11;
    FSRs                      fsr                  = 12;

    /// Ground truth from a simulator
    webots.OdometryGroundTruth odometry_ground_truth = 13;
}

message ButtonLeftDown {}

message ButtonLeftUp {}

message ButtonMiddleDown {}

message ButtonMiddleUp {}

// Reset sensors and servo targets in Webots
message ResetWebotsServos {}
