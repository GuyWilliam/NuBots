/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.actuation;

import "Vector.proto";
import "Matrix.proto";

/**
 * Contains lots of kinematics config measurements and transforms.
 * See `KinematicsConfiguration.yaml` for more detail on a particular variable.
 * Convention: all values positive
 */
message KinematicsModel {
    message Leg {
        double HIP_OFFSET_X                = 1;
        double HIP_OFFSET_Y                = 2;
        double HIP_OFFSET_Z                = 3;
        double UPPER_LEG_LENGTH            = 4;
        double LOWER_LEG_LENGTH            = 5;
        double FOOT_HEIGHT                 = 6;
        double FOOT_LENGTH                 = 7;
        double TOE_LENGTH                  = 8;
        double HEEL_LENGTH                 = 9;
        double FOOT_WIDTH                  = 10;
        double FOOT_CENTRE_TO_ANKLE_CENTRE = 11;
        double LENGTH_BETWEEN_LEGS         = 12;
        int32  LEFT_TO_RIGHT_HIP_YAW       = 13;
        int32  LEFT_TO_RIGHT_HIP_ROLL      = 14;
        int32  LEFT_TO_RIGHT_HIP_PITCH     = 15;
        int32  LEFT_TO_RIGHT_KNEE          = 16;
        int32  LEFT_TO_RIGHT_ANKLE_PITCH   = 17;
        int32  LEFT_TO_RIGHT_ANKLE_ROLL    = 18;
    }

    message Head {
        double NECK_BASE_POS_FROM_ORIGIN_X     = 1;
        double NECK_BASE_POS_FROM_ORIGIN_Y     = 2;
        double NECK_BASE_POS_FROM_ORIGIN_Z     = 3;
        double NECK_LENGTH                     = 4;
        double NECK_TO_CAMERA_X                = 5;
        double NECK_TO_CAMERA_Y                = 6;
        double NECK_TO_CAMERA_Z                = 7;
        double CAMERA_DECLINATION_ANGLE_OFFSET = 8;
        double INTERPUPILLARY_DISTANCE         = 13;

        // Head movement limits, in radians
        double MAX_YAW   = 9;
        double MIN_YAW   = 10;
        double MAX_PITCH = 11;
        double MIN_PITCH = 12;
    }

    message Arm {
        double DISTANCE_BETWEEN_SHOULDERS = 1;
        double SHOULDER_Z_OFFSET          = 2;
        double SHOULDER_X_OFFSET          = 3;
        double SHOULDER_LENGTH            = 4;
        double SHOULDER_WIDTH             = 5;
        double SHOULDER_HEIGHT            = 6;
        double UPPER_ARM_LENGTH           = 7;
        double UPPER_ARM_Y_OFFSET         = 8;
        double UPPER_ARM_X_OFFSET         = 9;
        double LOWER_ARM_LENGTH           = 10;
        double LOWER_ARM_Y_OFFSET         = 11;
        double LOWER_ARM_Z_OFFSET         = 12;
    }

    /// {CoM_x, CoM_y, CoM_z, mass} in SI units
    /// A Particles CoM is in particle space
    message MassModel {
        vec4 head        = 1;
        vec4 arm_upper   = 2;
        vec4 arm_lower   = 3;
        vec4 torso       = 4;
        vec4 hip_block   = 5;
        vec4 leg_upper   = 6;
        vec4 leg_lower   = 7;
        vec4 ankle_block = 8;
        vec4 foot        = 9;
    }

    /// Particle inertial tensors (in particle space) with respect to the CoM of
    /// the particle
    ///  [[xx, xy, xz],
    ///  [xy, yy, yz],
    ///  [xz, yz, zz]]
    /// SI Units
    message TensorModel {
        mat3 head        = 1;
        mat3 arm_upper   = 2;
        mat3 arm_lower   = 3;
        mat3 torso       = 4;
        mat3 hip_block   = 5;
        mat3 leg_upper   = 6;
        mat3 leg_lower   = 7;
        mat3 ankle_block = 8;
        mat3 foot        = 9;
    }

    Leg         leg          = 1;
    Head        head         = 2;
    Arm         arm          = 3;
    MassModel   mass_model   = 4;
    TensorModel tensor_model = 5;
}
