/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2021 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.platform.webots;

// Copy of cyberbotics/webots projects/samples/contests/robocup/controllers/player/messages.proto

message Vector3 {
    double X = 1;
    double Y = 2;
    double Z = 3;
}

message PositionSensorMeasurement {
    string name  = 1;
    double value = 2;
}

message AccelerometerMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [m/sË†2], x-axis, y-axis, z-axis
}

message GyroMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [rad/s], x-axis, y-axis, z-axis
}

message BumperMeasurement {
    string name  = 1;
    bool   value = 2;
}

message ForceMeasurement {
    string name  = 1;
    double value = 2;  // [N]
}

message Force3DMeasurement {
    string  name  = 1;
    Vector3 value = 2;  // [N], x-axis, y-axis, z-axis
}

message Force6DMeasurement {  // not yet implemented
    string  name   = 1;
    Vector3 force  = 2;  // [N], x-axis, y-axis, z-axis
    Vector3 torque = 3;  // [N.m], x-axis, y-axis, z-axis
}

message CameraMeasurement {
    string name                   = 1;
    int32  width                  = 2;
    int32  height                 = 3;
    int32  quality                = 4;  // 100 = no compression, 0 = high compression
    bytes  data                   = 5;  // JPEG encoded data
    double horizontalFieldOfView  = 6;  // express in [rad]
    int32  centerX                = 7;  // horizontal optical center in pixels
    int32  centerY                = 8;  // vertical optical center in pixels
    double radialCoefficients     = 9;
    double tangentialCoefficients = 10;
}

message SensorMeasurements {
    double time = 1;  // time stamp at which the measurements were performed expressed in [s]
    repeated PositionSensorMeasurement position_sensor = 2;
    repeated AccelerometerMeasurement  accelerometer   = 3;
    repeated GyroMeasurement           gyro            = 4;
    repeated BumperMeasurement         bumper          = 5;
    repeated Force3DMeasurement        force_3d        = 6;
    repeated Force6DMeasurement        force_6d        = 7;
    repeated CameraMeasurement         camera          = 8;
}

message MotorPosition {
    string name     = 1;
    double position = 2;  // linear or angular target position expressed in [m] or [rad]
}

message MotorVelocity {
    string name     = 1;
    double velocity = 2;  // linear or angular target velocity expressed in [m/s] or [rad/s]
}

message MotorForce {
    string name  = 1;
    double force = 2;  // target force expressed in [N]
}

message MotorTorque {
    string name   = 1;
    double torque = 2;  // target torque expressed in [N.m]
}

message MotorPID {
    string  name = 1;
    Vector3 PID  = 2;  // PID controller values
}

message SensorTimeStep {  // apply to a Accelerometer, Camera, Gyro, PositionSensor or TouchSensor
    string name     = 1;
    double timeStep = 2;  // time between two measurements expressed in [s], disabled if 0
}

message CameraQuality {
    string name    = 1;
    int32  quality = 2;  // JPEG quality
}

message CameraExposure {
    string name     = 1;
    double exposure = 2;  // exposure time
}

message ActuatorRequests {
    repeated MotorPosition  motor_position   = 1;
    repeated MotorVelocity  motor_velocity   = 2;
    repeated MotorForce     motor_force      = 3;
    repeated MotorTorque    motor_torque     = 4;
    repeated MotorPID       motor_pid        = 5;
    repeated SensorTimeStep sensor_time_step = 6;
    repeated CameraQuality  camera_quality   = 7;
    repeated CameraExposure camera_exposure  = 8;
}
