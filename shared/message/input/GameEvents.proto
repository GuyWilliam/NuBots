/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "message/input/GameState.proto";

/**
 * Contains event tracking information
 */
message GameEvents {
    /// Context describes which actor/team is being referred to by an event
    enum Context {
        UNKNOWN_CONTEXT = 0;
        SELF            = 1;
        TEAM            = 2;
        OPPONENT        = 3;
        UNKNOWN         = 4;
    };
    /// The colour of the party referred to by the context
    enum TeamColour {
        UNKNOWN_TEAM_COLOUR = 0;
        CYAN                = 1;
        MAGENTA             = 2;
    };

    /// Current total score for both teams
    message Score {
        /// Current total score for our team
        uint32 ownScore = 1;
        /// Current total score for opposition team
        uint32 opponentScore = 2;
    }

    /// Goal score notification message, with total score for that team
    message GoalScored {
        /// The actor/team who scored the goal
        Context context = 1;
        /// The total score of the actor/team who scored
        uint32 totalScore = 2;
    }

    /// Penalty notification message, with context and a resume play timestamp
    message Penalisation {
        /// The party being penalised
        Context context = 1;
        /// The exact player being penalised
        uint32 robotId = 2;
        /// The timestamp when the robot may resume playing
        google.protobuf.Timestamp ends = 3;
        /// The type of infraction which caused the penalty
        GameState.Data.PenaltyReason reason = 4;
    }

    /// The context and robot which were unpenalised
    message Unpenalisation {
        /// The context being unpenalised
        Context context = 1;
        /// The specific robot being unpenalised
        uint32 robotId = 2;
    }

    /// Message from a coach, and the intended recipient context
    message CoachMessage {
        /// The intended recipient(s)
        Context context = 1;
        /// The contents of the message
        string message = 2;
    }

    /// Message indicating half time has occurred
    message HalfTime {
        /// True if currently first half
        bool firstHalf = 1;
    }

    /// Ball kicked out message with context and timestamp
    message BallKickedOut {
        /// The party which kicked the ball out
        Context context = 1;
        /// The time when the ball was kicked out
        google.protobuf.Timestamp time = 3;
    }

    /// The context of the team kicking off
    message KickOffTeam {
        /// The party kicking off
        Context context = 1;
    }

    /// Set of timestamps for different parts of the game, with current phase state
    message GamePhase {
        /// Current phase state, such as PLAYING or TIMEOUT
        GameState.Data.Phase phase = 1;

        // INITIAL
        // READY

        /// Time when play begins
        google.protobuf.Timestamp readyTime = 2;

        // SET
        // PLAYING

        /// Time when the first half is due to end
        google.protobuf.Timestamp endHalf = 3;

        google.protobuf.Timestamp ballFree = 4;

        // TIMEOUT

        /// Timestamp when the current phase will end
        google.protobuf.Timestamp ends = 5;

        // FINISHED

        /// Time when the next half is to begin
        google.protobuf.Timestamp nextHalf = 6;
    }

    /// UNKNOWN_MODE, NORMAL, PENALTY_SHOOTOUT or OVERTIME
    message GameMode {
        GameState.Data.Mode mode = 1;
    }
}
