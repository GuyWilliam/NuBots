// MIT License
//
// Copyright (c) 2023 NUbots
//
// This file is part of the NUbots codebase.
// See https://github.com/NUbots/NUbots for further info.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

package message.planning;

import "Vector.proto";
import "Transform.proto";

/// Plan a path to walk to the specified point
message WalkTo {
    /// Transform from desired robot pose {d} to robot {r} space
    iso3 Hrd = 1;
}

/// Turn on the spot in the given direction
message TurnOnSpot {
    /// Direction to turn
    bool clockwise = 1;
}

message WalkDirect {
    /// Transform from desired robot pose {d} to robot {r} space
    iso3 Hrd = 1;
    /// Aproach radius, distance to target at which the robot will start slowing down
    double approach_radius = 2;
    /// Don't align with the target heading
    bool dont_align_towards_target = 3;
}


enum WalkToState {
    UNKNOWN = 0;
    ROTATE_TO_TARGET_POINT = 1;
    WALK_TO_TARGET = 2;
    STRAFE_TO_TARGET = 3;
    ROTATE_TO_TARGET_HEADING = 4;
    AT_TARGET = 5;
}

/// Debug information for walk to planning
message WalkToDebug {
    /// Transform from desired robot pose {d} to robot {r} space
    iso3 Hrd = 1;

    /// Current state of the walk to planning
    WalkToState state = 2;

    /// Requested walk velocity
    vec3 velocity_target = 3;

    double rotate_to_target_pos_error_threshold = 4;
    double rotate_to_target_ori_error_threshold = 5;

    double walk_to_target_pos_error_threshold = 6;

    double align_with_target_ori_error_threshold = 7;

    double translational_error = 8;
    double angle_to_target = 9;
    double angle_to_desired_heading = 10;
}

/// Turn around the ball in the given direction
message PivotAroundPoint {
    /// Direction to turn
    bool clockwise = 1;
}
