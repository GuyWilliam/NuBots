/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.support;

import "Vector.proto";

/**
 * Information about location and size of field objects and markers.
 * Details about field measurements can be found in 'Law 1 - The Field of Play',
 * in the RoboCup rulebook, here https://humanoid.robocup.org/materials/rules/
 * We have these config values mirrored in `SoccerConfig/data/config/`.
 */
message FieldDescription {
    /// The cross-sectional shape of the goalposts
    enum GoalpostType {
        RECTANGLE = 0;
        CIRCLE    = 1;
    }
    /// Measurements of the field which are loaded from config file. In metres
    message FieldDimensions {
        /// The rules say that the lines must be the same width
        float line_width = 1;
        /// The 'touch line' length - AKA the sideline
        float field_length = 2;
        /// The 'goal line' length - AKA the baseline
        float field_width = 3;
        /// Cross-sectional shape of goal-posts
        GoalpostType goalpost_type = 4;
        /// Distance behind the keeper to the net
        float goal_depth = 5;
        /// Distance between inner edges of goal posts
        float goal_width = 6;
        /// 'Goal area' is equivalent to 6-yard box in soccer. Length is front to back, if you standing in the middle
        /// of the field facing goals
        float goal_area_length = 7;
        /// 'Goal area' is equivalent to 6-yard box in soccer. Width is left to right, if you're standing in the middle
        /// of the field facing goals
        float goal_area_width = 8;
        /// Height to the bottom of the crossbar
        float goal_crossbar_height = 9;

        float goalpost_width = 10;

        float goalpost_depth = 11;

        float goal_crossbar_width = 12;

        float goal_crossbar_depth = 13;

        float goal_net_height = 14;
        /// Measured from the goal line to the middle of the penalty mark
        float penalty_mark_distance = 15;
        /// Diameter of the circle in the center of the field
        float center_circle_diameter = 16;
        /// Minimum width of the border strip around the field
        float border_strip_min_width = 17;
        /// 'Penalty area' is equivalent to 18-yard box in soccer. Length is from the goal line to the horizontal line
        /// if you're facing the centre of the field from the goal line
        float penalty_area_length = 18;
        /// 'Penalty area' is equivalent to 18-yard box in soccer. Width is the distance between the sides of the
        ///  penalty box facing the centre of the field/goal
        float penalty_area_width = 19;
    }
    /// @see Law 2
    float ball_radius = 1;
    /// Calculated as goal_crossbar_height + goal_crossbar_width
    float goalpost_top_height = 2;

    // Coordinates of goalpost centers calculated from the FieldDimensions, in field space

    /// {x, y} of our left goalpost, calculated from goal_width and field_length
    /// It's the left one, as if you were looking from halfway
    vec2 goalpost_own_l = 4;
    /// {x, y} of our right goalpost, calculated from goal_width and field_length
    /// It's the right one, as if you were looking from halfway
    vec2 goalpost_own_r = 5;
    /// {x, y} of opposition left goalpost, calculated from goal_width and field_length
    vec2 goalpost_opp_l = 6;
    /// {x, y} of opposition right goalpost, calculated from goal_width and field_length
    vec2 goalpost_opp_r = 7;
    /// Set of field dimensions loaded from config
    FieldDimensions dimensions = 8;
}
