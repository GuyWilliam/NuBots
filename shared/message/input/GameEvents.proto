/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "message/input/GameState.proto";

message GameEvents {
    /// Context describes which actor/team is being referred to by an event
    enum Context {
        UNKNOWN_CONTEXT = 0;
        SELF            = 1;
        TEAM            = 2;
        OPPONENT        = 3;
        UNKNOWN         = 4;
    };

    enum TeamColour {
        UNKNOWN_TEAM_COLOUR = 0;
        CYAN                = 1;
        MAGENTA             = 2;
    };

    message Score {
        uint32 ownScore      = 1;
        uint32 opponentScore = 2;
    }

    message GoalScored {
        /// The actor/team who scored the goal
        Context context    = 1;
        uint32  totalScore = 2;
    }

    message Penalisation {
        Context context = 1;
        uint32  robotId = 2;
        /// The timestamp when the robot may resume playing
        google.protobuf.Timestamp    ends   = 3;
        GameState.Data.PenaltyReason reason = 4;
    }

    /// The context and robot which were unpenalised
    message Unpenalisation {
        Context context = 1;
        uint32  robotId = 2;
    }

    message CoachMessage {
        /// The intended recipient(s)
        Context context = 1;
        string  message = 2;
    }

    message HalfTime {
        bool firstHalf = 1;
    }

    message BallKickedOut {
        /// The party which kicked the ball out
        Context                   context = 1;
        google.protobuf.Timestamp time    = 3;
    }

    message KickOffTeam {
        Context context = 1;
    }

    message GamePhase {
        GameState.Data.Phase phase = 1;
        /// Time when play begins.
        /// Set some time after game-states INITIAL or READY
        google.protobuf.Timestamp readyTime = 2;
        /// Time when the first half is due to end
        /// Set some time after game-states SET or PLAYING
        google.protobuf.Timestamp endHalf  = 3;
        google.protobuf.Timestamp ballFree = 4;
        /// Timestamp when the current phase will end
        /// Set some time after game-state TIMEOUT
        google.protobuf.Timestamp ends = 5;
        /// Time when the next half is to begin
        /// Set some time after game-state FINISHED
        google.protobuf.Timestamp nextHalf = 6;
    }

    message GameMode {
        GameState.Data.Mode mode = 1;
    }
}
