/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.input;

import "Vector.proto";

/**
 * Contains Marker, Rigidbody, and message metadata information.
 * We use optitrack for our mocap system. Their documentation is here:
 * https://v22.wiki.optitrack.com/index.php?title=OptiTrack_Documentation_Wiki
 */
message MotionCapture {

    /// Mocap reference points to track
    message Marker {
        /// Identifier for the marker
        uint32 id = 1;
        /// Position of the marker in 3D space
        fvec3 position = 2;

        float size = 3;
    }

    /// A named set of Mocap markers
    message MarkerSet {

        /// The identifying name of the set of markers
        string name = 1;
        /// The associated set of markers
        repeated Marker markers = 2;
    }

    /// A collection of three or more markers on an object that are interconnected to each other with an assumption
    /// that the tracked object is undeformable. See https://v22.wiki.optitrack.com/index.php?title=Rigid_Body_Tracking
    /// The bones which make up skeletons are RigidBodys
    message RigidBody {
        /// Unique identifying number for the rigid body
        uint32 id = 1;
        /// Position of the centre of the rigidbody in 3D space
        fvec3 position = 2;
        /// Quaternion representation of the rigid body's rotation
        fvec4 rotation = 3;
        /// Set of markers on the rigid body
        repeated Marker markers = 4;

        float error         = 5;
        bool  trackingValid = 6;

        // Information added by the model

        /// Identifying name of the rigid body
        string name = 7;

        fvec3           offset   = 8;
        uint32          parent   = 9;
        repeated uint32 children = 10;
    }

    /// The whole character for which the motion represents
    message Skeleton {
        /// Identifying number of the skeleton
        uint32 id = 1;
        /// Set of bones which make up the skeleton
        repeated RigidBody bones = 2;

        // Information added by the model

        /// The name of this skeleton
        string name = 3;
    }

    message LabeledMarker {
        /// The marker the information refers to
        Marker marker = 1;

        bool occluded         = 2;
        bool pointCloudSolved = 3;
        bool modelSolved      = 4;
    }

    /// Each bone within a skeleton can be subject to position,
    /// orientation and scale changes over the course of the animation,
    /// where each parameter is referred to as a Channel or Degree of Freedom (DOF)
    message Channel {
        /// The changes for this degree of freedom over a given timespan
        repeated float channel = 1;
    }

    /// Contains the data output from the force plate, which can be synced with mocap footage
    message ForcePlate {
        /// Unique number identifier for the forceplate
        uint32 id = 1;
        /// Set of Channels/Degrees of Freedom and their data, representing their change over time
        repeated Channel channels = 2;
    }
    /// Indicates the chronological order of the frame
    uint32 frameNumber = 1;

    float latency = 2;
    /// Encoded timestamp - 0 := the first timecode. hour:minute:second:frame bytes, in binary coded decimal
    /// see https://en.wikipedia.org/wiki/SMPTE_timecode
    uint32 timecode = 3;

    uint32 timecodeSub = 4;
    double timestamp   = 5;
    /// Whether or not this frame is to be recorded
    bool recording = 6;

    bool trackedModelsChanged = 7;
    /// Set of sets of markers associated with this model
    repeated MarkerSet markerSets = 8;
    /// Set of markers associated with this model
    repeated Marker markers = 9;
    /// Set of rigid bodies associated with this model
    repeated RigidBody rigidBodies = 10;
    /// Set of skeletons being tracked by the model
    repeated Skeleton skeletons = 11;
    /// Set of labeled markers associated with the model
    repeated LabeledMarker labeledMarkers = 12;
    /// Set of force plates associated with the model
    repeated ForcePlate forcePlates = 13;
}
