/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";

/**
 * Contains lots of game state information
 */
message GameState {

    /// All of the information from GameState except the event string
    message Data {
        /// Type of gameplay
        enum Mode {
            UNKNOWN_MODE     = 0;
            NORMAL           = 1;
            PENALTY_SHOOTOUT = 2;
            OVERTIME         = 3;
        }
        /// Current state of the game
        enum Phase {
            UNKNOWN_PHASE = 0;
            INITIAL       = 1;
            READY         = 2;
            SET           = 3;
            PLAYING       = 4;
            TIMEOUT       = 5;
            FINISHED      = 6;
        }
        /// The type of infraction which caused the penalty
        enum PenaltyReason {
            UNKNOWN_PENALTY_REASON        = 0;
            UNPENALISED                   = 1;
            BALL_MANIPULATION             = 2;
            PHYSICAL_CONTACT              = 3;
            ILLEGAL_ATTACK                = 4;
            ILLEGAL_DEFENSE               = 5;
            REQUEST_FOR_PICKUP            = 6;
            REQUEST_FOR_SERVICE           = 7;
            REQUEST_FOR_PICKUP_TO_SERVICE = 8;
            SUBSTITUTE                    = 9;
            MANUAL                        = 10;
            PLAYER_PUSHING                = 11;
        }

        /// A tracking message for robots, with penalty tracking data
        message Robot {
            /// The robot which is being tracked
            uint32 id = 1;
            /// The infraction the robot being tracked committed
            PenaltyReason penalty_reason = 2;
            /// The timestamp when the robot will be playing again
            google.protobuf.Timestamp unpenalised = 3;
        }

        /// Set of robots on a team, with a score and coach message
        message Team {
            /// Unique team number
            uint32 team_id = 1;
            /// The team's current score
            uint32 score = 2;
            ///  The coach's message to the team - not only for our team
            string coach_message = 3;
            /// Set of robot players on the team
            repeated Robot players = 4;
        }
        /// The current state of the game, such as PLAYING or TIMEOUT
        Phase phase = 1;
        /// Current type of gameplay, such as NORMAL or OVERTIME
        Mode mode = 2;
        /// Indicator variable, set to false at the end of the first half
        bool first_half = 3;
        /// Describes who kicked the ball out, when it goes out
        bool kicked_out_by_us = 4;
        /// Timestamp when the ball was kicked out, when that happens
        google.protobuf.Timestamp kicked_out_time = 5;
        /// Indicator variable describing whose kick off is next
        bool our_kick_off = 6;
        /// Timestamp when the robot thinks the half is due to end
        google.protobuf.Timestamp primary_time = 7;
        /// A thing in the game controller protocol. E.g. primary time might
        /// count the half time, but secondary time will count how long in ready, or how long until penalty etc.
        google.protobuf.Timestamp secondary_time = 8;
        /// The robot's own team - set of players, score, and coach message
        Team team = 9;
        /// The opponent's team - set of players, score, and coach message
        Team opponent = 10;
        /// Tracking information about this robot, including penalty reason and unpenalised timestamp
        Robot self = 11;
    }
    /// The set of submessages with gamestate information
    Data data = 1;

    string event = 2;
}
